2020-10-29 22:03:37,586 [20] ERROR TransactionManager.CommandsManager [(null)] - Error while executing commands from CommandsManager: Ninject.ActivationException: Error activating IAmCommandHandler{AddOrderCommand}
No matching bindings are available, and the type is not self-bindable.
Activation path:
  1) Request for IAmCommandHandler{AddOrderCommand}

Suggestions:
  1) Ensure that you have defined a binding for IAmCommandHandler{AddOrderCommand}.
  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.
  3) Ensure you have not accidentally created more than one kernel.
  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.
  5) If you are using automatic module loading, ensure the search path and filters are correct.

   at Ninject.KernelBase.Resolve(IRequest request, Boolean handleMissingBindings)
   at Ninject.KernelBase.Resolve(IRequest request)
   at Ninject.ResolutionExtensions.GetResolutionIterator(IResolutionRoot root, Type service, Func`2 constraint, IEnumerable`1 parameters, Boolean isOptional, Boolean isUnique)
   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters)
   at TransactionManager.Providers.CommandHandlersProvider.CreateCommandHandlerInstance(IAmCommand command, IKernel kernel, IAmDbContext dbContext) in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\Providers\CommandHandlersProvider.cs:line 15
   at TransactionManager.CommandsManager.<ExecuteCommands>d__7.MoveNext() in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\CommandsManager.cs:line 41
2020-10-29 22:08:48,182 [6] ERROR TransactionManager.CommandsManager [(null)] - Error while executing commands from CommandsManager: Ninject.ActivationException: Error activating IAmCommandHandler{AddOrderCommand}
No matching bindings are available, and the type is not self-bindable.
Activation path:
  1) Request for IAmCommandHandler{AddOrderCommand}

Suggestions:
  1) Ensure that you have defined a binding for IAmCommandHandler{AddOrderCommand}.
  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.
  3) Ensure you have not accidentally created more than one kernel.
  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.
  5) If you are using automatic module loading, ensure the search path and filters are correct.

   at Ninject.KernelBase.Resolve(IRequest request, Boolean handleMissingBindings)
   at Ninject.KernelBase.Resolve(IRequest request)
   at Ninject.ResolutionExtensions.GetResolutionIterator(IResolutionRoot root, Type service, Func`2 constraint, IEnumerable`1 parameters, Boolean isOptional, Boolean isUnique)
   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters)
   at TransactionManager.Providers.CommandHandlersProvider.CreateCommandHandlerInstance(IAmCommand command, IKernel kernel, IAmDbContext dbContext) in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\Providers\CommandHandlersProvider.cs:line 15
   at TransactionManager.CommandsManager.<ExecuteCommands>d__7.MoveNext() in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\CommandsManager.cs:line 41
2020-10-29 22:15:52,274 [6] ERROR TransactionManager.CommandsManager [(null)] - Error while executing commands from CommandsManager: Ninject.ActivationException: Error activating IAmCommandHandler{AddOrderCommand}
No matching bindings are available, and the type is not self-bindable.
Activation path:
  1) Request for IAmCommandHandler{AddOrderCommand}

Suggestions:
  1) Ensure that you have defined a binding for IAmCommandHandler{AddOrderCommand}.
  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.
  3) Ensure you have not accidentally created more than one kernel.
  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.
  5) If you are using automatic module loading, ensure the search path and filters are correct.

   at Ninject.KernelBase.Resolve(IRequest request, Boolean handleMissingBindings)
   at Ninject.KernelBase.Resolve(IRequest request)
   at Ninject.ResolutionExtensions.GetResolutionIterator(IResolutionRoot root, Type service, Func`2 constraint, IEnumerable`1 parameters, Boolean isOptional, Boolean isUnique)
   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters)
   at TransactionManager.Providers.CommandHandlersProvider.CreateCommandHandlerInstance(IAmCommand command, IKernel kernel, IAmDbContext dbContext) in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\Providers\CommandHandlersProvider.cs:line 15
   at TransactionManager.CommandsManager.<ExecuteCommands>d__7.MoveNext() in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\CommandsManager.cs:line 41
2020-10-29 22:30:59,052 [13] ERROR TransactionManager.CommandsManager [(null)] - Error while executing commands from CommandsManager: Ninject.ActivationException: Error activating IAmCommandHandler{AddOrderCommand}
No matching bindings are available, and the type is not self-bindable.
Activation path:
  1) Request for IAmCommandHandler{AddOrderCommand}

Suggestions:
  1) Ensure that you have defined a binding for IAmCommandHandler{AddOrderCommand}.
  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.
  3) Ensure you have not accidentally created more than one kernel.
  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.
  5) If you are using automatic module loading, ensure the search path and filters are correct.

   at Ninject.KernelBase.Resolve(IRequest request, Boolean handleMissingBindings)
   at Ninject.KernelBase.Resolve(IRequest request)
   at Ninject.ResolutionExtensions.GetResolutionIterator(IResolutionRoot root, Type service, Func`2 constraint, IEnumerable`1 parameters, Boolean isOptional, Boolean isUnique)
   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters)
   at TransactionManager.Providers.CommandHandlersProvider.CreateCommandHandlerInstance(IAmCommand command, IKernel kernel, IAmDbContext dbContext) in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\Providers\CommandHandlersProvider.cs:line 15
   at TransactionManager.CommandsManager.<ExecuteCommands>d__7.MoveNext() in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\CommandsManager.cs:line 41
2020-10-29 22:35:59,118 [8] ERROR TransactionManager.CommandsManager [(null)] - Error while executing commands from CommandsManager: Ninject.ActivationException: Error activating IAmCommandHandler{AddOrderCommand}
No matching bindings are available, and the type is not self-bindable.
Activation path:
  1) Request for IAmCommandHandler{AddOrderCommand}

Suggestions:
  1) Ensure that you have defined a binding for IAmCommandHandler{AddOrderCommand}.
  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.
  3) Ensure you have not accidentally created more than one kernel.
  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.
  5) If you are using automatic module loading, ensure the search path and filters are correct.

   at Ninject.KernelBase.Resolve(IRequest request, Boolean handleMissingBindings)
   at Ninject.KernelBase.Resolve(IRequest request)
   at Ninject.ResolutionExtensions.GetResolutionIterator(IResolutionRoot root, Type service, Func`2 constraint, IEnumerable`1 parameters, Boolean isOptional, Boolean isUnique)
   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters)
   at TransactionManager.Providers.CommandHandlersProvider.CreateCommandHandlerInstance(IAmCommand command, IKernel kernel, IAmDbContext dbContext) in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\Providers\CommandHandlersProvider.cs:line 15
   at TransactionManager.CommandsManager.<ExecuteCommands>d__7.MoveNext() in D:\Practice\UnitOfWorkInMVC\UniotOfWorkInMVC\TransactionManager\CommandsManager.cs:line 41
